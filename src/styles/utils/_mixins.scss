
$breakpoints: (
  'medium': (min-width: 800px),
  'large': (min-width: 1000px),
  'huge': (min-width: 1200px),
);

/// button with background color
/// @param {color} $color
@mixin button-bg($color) {
  background: $color;
  &:hover {
    cursor: pointer;
    background:darken($color,8%);
    transition: all 0.3s ease;
  }
  &:active {
    background:darken($color,25%);
  } 
}

/// horizontal divider with text
/// @param {color} $color
@mixin divider ($color) {
  display: flex;
  align-items: center;
  text-align: center;
  color: $color;
  &::before, &::after {
    content: '';
    flex: 1;
    border-bottom: 1px solid $color;
  }

  &::before {
    margin-right: 2em;
  }

  &::after {
    margin-left: 2em;
  }
}
/// input style
@mixin input {
  outline: none;
}
/// input placeholder styling
@mixin input-placeholder {
  &.placeholder { @content; }
  &:-moz-placeholder { @content; }
  &::-moz-placeholder { @content; }
  &:-ms-input-placeholder { @content; }
  &::-webkit-input-placeholder { @content; }
}

/// box shadow wrapper
/// @param {Number} $level
@mixin box_shadow ($level) {

  @if $level == 1 {
      box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
  } @else if $level == 2 {
      box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);
  } @else if $level == 3 {
      box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);
  } @else if $level == 4 {
      box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);
  } @else if $level == 5 {
      box-shadow: 0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);
  }

}

/// rounded wrapper
/// @param {Length} $radius
@mixin rounded($radius: 0.5em) {
  -webkit-border-radius: .5em; 
  -moz-border-radius: .5em;
  border-radius: .5em;
}

/// set size of element.
/// @param {Length} $width
/// @param {Length} $height
@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}
/// responsive manager.
/// @param {String} $breakpoint
/// @requires $breakpoints.
@mixin respond-to($breakpoint) {
  $raw-query: map-get($breakpoints, $breakpoint);

  @if $raw-query {
    $query: if(
      type-of($raw-query) == 'string',
      unquote($raw-query),
      inspect($raw-query)
    );

    @media #{$query} {
      @content;
    }
  } @else {
    @error 'No value found for `#{$breakpoint}`. '
         + 'Please make sure it is defined in `$breakpoints` map.';
  }
}